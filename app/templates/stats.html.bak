{% extends 'base.html' %}

{% block title %}Stats - The Journey{% endblock %}

{% block content %}
<style>
    /* Import custom fonts */
    @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@400;500;600;700&family=Orbitron:wght@400;500;600;700&family=Exo+2:wght@300;400;500;600;700&display=swap');
    
    /* Basic styling */
    .stats-page {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
        font-family: 'Exo 2', sans-serif;
    }
    
    .stats-page h1 {
        font-family: 'Orbitron', sans-serif;
        font-weight: 700;
        color: #e5e7eb;
        text-shadow: 0 0 15px rgba(99, 102, 241, 0.5);
        margin-bottom: 30px;
        text-transform: uppercase;
        letter-spacing: 2px;
        text-align: center;
        font-size: 2.5rem;
    }
    
    /* Enhanced skill card styling */
    .skill-card {
        background: linear-gradient(135deg, rgba(26, 32, 48, 0.95), rgba(35, 41, 70, 0.95));
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        position: relative;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 10px rgba(99, 102, 241, 0.2);
        border: 1px solid rgba(101, 126, 234, 0.2);
        transition: all 0.3s ease;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        cursor: pointer;
        z-index: 1;
    }
    
    .skill-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4), 0 0 15px rgba(99, 102, 241, 0.3);
        border-color: rgba(101, 126, 234, 0.4);
    }
    
    .skill-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #3b82f6, #6366f1);
        z-index: 1;
    }
    
    .skill-card.hovering {
        background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(40, 50, 80, 0.95));
    }
    
    .skill-icon {
        font-size: 2rem;
        margin-bottom: 10px;
        color: #e5e7eb;
        text-align: center;
    }
    
    .skill-name {
        font-size: 1.2rem;
        font-weight: 600;
        color: #e5e7eb;
        margin-bottom: 10px;
        text-shadow: 0 0 10px rgba(99, 102, 241, 0.3);
        text-align: center;
        font-family: 'Rajdhani', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .skill-value {
        font-size: 3rem;
        font-weight: bold;
        text-shadow: 0 0 15px rgba(165, 180, 252, 0.4);
        margin-bottom: 10px;
        text-align: center;
        font-family: 'Orbitron', sans-serif;
    }
    
    .skill-progress-bar {
        height: 8px;
        background: rgba(15, 23, 42, 0.7);
        border-radius: 4px;
        overflow: hidden;
        margin-top: 10px;
        position: relative;
    }
    
    .skill-progress {
        height: 100%;
        border-radius: 4px;
        width: 0%;
        transition: width 0.8s cubic-bezier(0.22, 1, 0.36, 1);
    }
    
    .skill-category {
        font-size: 0.8rem;
        margin-top: 15px;
        text-transform: uppercase;
        letter-spacing: 1px;
        text-align: center;
        font-family: 'Rajdhani', sans-serif;
        font-weight: 500;
    }
    
    /* Skill increase button */
    .skill-increase {
        position: absolute;
        top: 10px;
        left: 10px;
        width: 32px;
        height: 32px;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        transition: all 0.2s ease;
        z-index: 5;
        opacity: 0;
    }
    
    .skill-card:hover .skill-increase {
        opacity: 1;
    }
    
    .skill-increase:hover {
        transform: scale(1.1);
    }
    
    .skill-increase:active {
        transform: scale(0.95);
    }
    
    /* Delete button styling */
    .delete-skill-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.4);
        font-size: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        opacity: 0;
        z-index: 10;
    }
    
    .skill-card:hover .delete-skill-btn {
        opacity: 1;
    }
    
    .delete-skill-btn:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: scale(1.1);
    }
    
    /* Tooltip styling */
    .skill-tooltip {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border-radius: 10px;
        padding: 20px;
        width: 90%;
        max-width: 300px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(99, 102, 241, 0.3);
        z-index: 100;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        background: rgba(15, 23, 42, 0.95);
    }
    
    .skill-tooltip.visible {
        opacity: 1;
        visibility: visible;
    }
    
    .tooltip-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #e5e7eb;
        margin-bottom: 10px;
        text-align: center;
        border-bottom: 1px solid rgba(99, 102, 241, 0.3);
        padding-bottom: 10px;
        font-family: 'Rajdhani', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    /* Category-specific styling */
    /* Physical */
    .physical h2 {
        color: #60a5fa;
        border-color: rgba(96, 165, 250, 0.3);
    }
    
    .skill-section.physical {
        border-color: rgba(96, 165, 250, 0.3);
    }
    
    .physical .skill-card::before {
        background: linear-gradient(90deg, #2563eb, #60a5fa);
    }
    
    .physical .skill-value {
        color: #60a5fa;
    }
    
    .physical .skill-progress {
        background: linear-gradient(90deg, #2563eb, #60a5fa);
    }
    
    .physical .skill-increase {
        background: linear-gradient(135deg, #2563eb, #60a5fa);
    }
    
    .physical .skill-category {
        color: #60a5fa;
    }
    
    .tooltip-physical {
        border: 1px solid rgba(96, 165, 250, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(96, 165, 250, 0.3);
    }
    
    /* Mental */
    .mental h2 {
        color: #a78bfa;
        border-color: rgba(167, 139, 250, 0.3);
    }
    
    .skill-section.mental {
        border-color: rgba(167, 139, 250, 0.3);
    }
    
    .mental .skill-card::before {
        background: linear-gradient(90deg, #7c3aed, #a78bfa);
    }
    
    .mental .skill-value {
        color: #a78bfa;
    }
    
    .mental .skill-progress {
        background: linear-gradient(90deg, #7c3aed, #a78bfa);
    }
    
    .mental .skill-increase {
        background: linear-gradient(135deg, #7c3aed, #a78bfa);
    }
    
    .mental .skill-category {
        color: #a78bfa;
    }
    
    .tooltip-mental {
        border: 1px solid rgba(167, 139, 250, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(167, 139, 250, 0.3);
    }
    
    /* Communication */
    .communication h2 {
        color: #f472b6;
        border-color: rgba(244, 114, 182, 0.3);
    }
    
    .skill-section.communication {
        border-color: rgba(244, 114, 182, 0.3);
    }
    
    .communication .skill-card::before {
        background: linear-gradient(90deg, #db2777, #f472b6);
    }
    
    .communication .skill-value {
        color: #f472b6;
    }
    
    .communication .skill-progress {
        background: linear-gradient(90deg, #db2777, #f472b6);
    }
    
    .communication .skill-increase {
        background: linear-gradient(135deg, #db2777, #f472b6);
    }
    
    .communication .skill-category {
        color: #f472b6;
    }
    
    .tooltip-communication {
        border: 1px solid rgba(244, 114, 182, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(244, 114, 182, 0.3);
    }
    
    /* Productivity */
    .productivity h2 {
        color: #34d399;
        border-color: rgba(52, 211, 153, 0.3);
    }
    
    .skill-section.productivity {
        border-color: rgba(52, 211, 153, 0.3);
    }
    
    .productivity .skill-card::before {
        background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .productivity .skill-value {
        color: #34d399;
    }
    
    .productivity .skill-progress {
        background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .productivity .skill-increase {
        background: linear-gradient(135deg, #10b981, #34d399);
    }
    
    .productivity .skill-category {
        color: #34d399;
    }
    
    .tooltip-productivity {
        border-color: rgba(16, 185, 129, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(16, 185, 129, 0.3);
    }
    
    /* Education */
    .education h2 {
        color: #fbbf24;
        border-color: rgba(251, 191, 36, 0.3);
    }
    
    .skill-section.education {
        border-color: rgba(251, 191, 36, 0.3);
    }
    
    .education .skill-card::before {
        background: linear-gradient(90deg, #d97706, #fbbf24);
    }
    
    .education .skill-value {
        color: #fbbf24;
    }
    
    .education .skill-progress {
        background: linear-gradient(90deg, #d97706, #fbbf24);
    }
    
    .education .skill-increase {
        background: linear-gradient(135deg, #d97706, #fbbf24);
    }
    
    .education .skill-category {
        color: #fbbf24;
    }
    
    .tooltip-education {
        border-color: rgba(245, 158, 11, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(245, 158, 11, 0.3);
    }
    
    /* Gaming */
    .gaming h2 {
        color: #8b5cf6;
        border-color: rgba(139, 92, 246, 0.3);
    }
    
    .skill-section.gaming {
        border-color: rgba(139, 92, 246, 0.3);
    }
    
    .gaming .skill-card::before {
        background: linear-gradient(90deg, #a855f7, #8b5cf6);
    }
    
    .gaming .skill-value {
        color: #8b5cf6;
    }
    
    .gaming .skill-progress {
        background: linear-gradient(90deg, #a855f7, #8b5cf6);
    }
    
    .gaming .skill-increase {
        background: linear-gradient(135deg, #a855f7, #8b5cf6);
    }
    
    .gaming .skill-category {
        color: #8b5cf6;
    }
    
    .tooltip-gaming {
        border: 1px solid rgba(139, 92, 246, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(139, 92, 246, 0.3);
    }
    
    /* Other */
    .other h2 {
        color: #94a3b8;
        border-color: rgba(148, 163, 184, 0.3);
    }
    
    .skill-section.other {
        border-color: rgba(148, 163, 184, 0.3);
    }
    
    .other .skill-card::before {
        background: linear-gradient(90deg, #64748b, #94a3b8);
    }
    
    .other .skill-value {
        color: #94a3b8;
    }
    
    .other .skill-progress {
        background: linear-gradient(90deg, #64748b, #94a3b8);
    }
    
    .other .skill-increase {
        background: linear-gradient(135deg, #64748b, #94a3b8);
    }
    
    .other .skill-category {
        color: #94a3b8;
    }
    
    .tooltip-other {
        border-color: rgba(156, 163, 175, 0.4);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 15px rgba(156, 163, 175, 0.3);
    }
    
    /* Info indicator styling */
    .info-indicator {
        position: absolute;
        bottom: 10px;
        right: 10px;
        font-size: 1.2rem;
        opacity: 0;
        transition: all 0.2s ease;
        cursor: pointer;
        z-index: 5;
    }
    
    .skill-card:hover .info-indicator {
        opacity: 0.7;
    }
    
    .info-indicator:hover {
        opacity: 1;
        transform: scale(1.2);
    }
    
    /* Section styling */
    .skill-section {
        margin-bottom: 40px;
        background: rgba(15, 23, 42, 0.5);
        border-radius: 16px;
        padding: 25px;
        border: 1px solid rgba(99, 102, 241, 0.2);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    }
    
    .skill-section h2 {
        font-size: 1.8rem;
        font-weight: 600;
        color: #e5e7eb;
        margin-bottom: 25px;
        border-bottom: 1px solid rgba(99, 102, 241, 0.3);
        padding-bottom: 15px;
        font-family: 'Orbitron', sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        text-align: center;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
    }
    
    /* Confirmation modal styling */
    .confirmation-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1000;
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
    }
    
    .confirmation-modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, rgba(26, 32, 48, 0.95), rgba(35, 41, 70, 0.95));
        padding: 30px;
        border-radius: 16px;
        max-width: 400px;
        width: 90%;
        text-align: center;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(99, 102, 241, 0.3);
    }
    
    .confirmation-modal-content h3 {
        margin-top: 0;
        color: #e5e7eb;
        font-size: 1.5rem;
        margin-bottom: 20px;
        font-family: 'Rajdhani', sans-serif;
    }
    
    .confirmation-modal-content p {
        color: #94a3b8;
        margin-bottom: 25px;
        font-family: 'Exo 2', sans-serif;
    }
    
    .confirmation-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
    }
    
    .confirm-delete-btn {
        background-color: #ef4444;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        font-family: 'Exo 2', sans-serif;
    }
    
    .confirm-delete-btn:hover {
        background-color: #dc2626;
        transform: translateY(-2px);
    }
    
    .cancel-delete-btn {
        background-color: #6b7280;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        font-family: 'Exo 2', sans-serif;
    }
    
    .cancel-delete-btn:hover {
        background-color: #4b5563;
        transform: translateY(-2px);
    }
    
    /* Add skill form styling */
    .add-skill-form {
        background: linear-gradient(135deg, rgba(26, 32, 48, 0.95), rgba(35, 41, 70, 0.95));
        border-radius: 16px;
        padding: 30px;
        margin-top: 40px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(99, 102, 241, 0.3);
    }
    
    .add-skill-form h3 {
        font-size: 1.5rem;
        color: #e5e7eb;
        margin-bottom: 20px;
        text-align: center;
        font-family: 'Orbitron', sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #e5e7eb;
        font-weight: 500;
        font-family: 'Rajdhani', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 12px 15px;
        background: rgba(15, 23, 42, 0.5);
        border: 1px solid rgba(99, 102, 241, 0.3);
        border-radius: 8px;
        color: #e5e7eb;
        font-family: 'Exo 2', sans-serif;
        transition: all 0.3s ease;
    }
    
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: rgba(99, 102, 241, 0.6);
        box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
    }
    
    .add-skill-submit {
        background: linear-gradient(135deg, #3b82f6, #1e40af);
        color: white;
        border: none;
        padding: 14px 24px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1rem;
        letter-spacing: 1px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'Rajdhani', sans-serif;
        text-transform: uppercase;
        display: block;
        margin: 0 auto;
        width: 200px;
        text-align: center;
    }
    
    .add-skill-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2), 0 0 10px rgba(59, 130, 246, 0.3);
    }
    
    /* Pulse animation */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }
    
    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .skill-section {
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    .skill-section:nth-child(2) { animation-delay: 0.1s; }
    .skill-section:nth-child(3) { animation-delay: 0.2s; }
    .skill-section:nth-child(4) { animation-delay: 0.3s; }
    .skill-section:nth-child(5) { animation-delay: 0.4s; }
    .skill-section:nth-child(6) { animation-delay: 0.5s; }
    
    .skill-card {
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    /* Hover description styles */
    .skill-description {
        position: absolute;
        top: -10px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(15, 23, 42, 0.95);
        color: #e5e7eb;
        padding: 10px 15px;
        border-radius: 8px;
        font-size: 0.9rem;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        z-index: 100;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        pointer-events: none;
    }
    
    .skill-description.visible {
        opacity: 1;
        visibility: visible;
    }
    
    /* Prevent description from overlapping the skill card */
    .skill-card {
        position: relative;
        z-index: 1;
    }
    
    /* Stats Overview Section */
    .stats-overview {
        margin: 20px 0;
        background: rgba(255, 255, 255, 0.03);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 20px;
    }
    
    .overview-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .overview-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        transition: transform 0.2s ease;
    }
    
    .overview-card:hover {
        transform: translateY(-5px);
    }
    
    .card-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;
    }
    
    .card-icon {
        font-size: 1.5rem;
        color: #fff;
    }
    
    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #fff;
    }
    
    .level-card .level-number {
        font-size: 2.5rem;
        font-weight: 700;
        color: #60a5fa;
        margin-bottom: 15px;
    }
    
    .level-progress {
        margin-top: 15px;
    }
    
    .progress-bar {
        width: 100%;
        height: 10px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
        overflow: hidden;
        margin: 10px 0;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(135deg, #3b82f6, #1e40af);
        border-radius: 5px;
        transition: width 0.3s ease;
    }
    
    .progress-text {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #a1a1aa;
    }
    
    .balance-chart {
        height: 200px;
        margin: 20px 0;
    }
    
    .balance-legend {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        margin-top: 15px;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .legend-color {
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }
    
    .legend-color.physical {
        background: #60a5fa;
    }
    
    .legend-color.mental {
        background: #8b5cf6;
    }
    
    .legend-color.communication {
        background: #10b981;
    }
    
    .legend-color.productivity {
        background: #f59e0b;
    }
    
    .legend-color.education {
        background: #ec4899;
    }
    
    .legend-text {
        font-size: 0.85rem;
        color: #fff;
    }
    
    .distribution-chart {
        height: 200px;
        margin: 20px 0;
    }
    
    .activity-list {
        margin-top: 15px;
    }
    
    .activity-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 10px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .activity-item:last-child {
        border-bottom: none;
    }
    
    .activity-icon {
        font-size: 1.2rem;
        color: #fff;
    }
    
    .activity-details {
        flex: 1;
    }
    
    .activity-name {
        font-size: 0.9rem;
        font-weight: 500;
        color: #fff;
    }
    
    .activity-time {
        font-size: 0.8rem;
        color: #a1a1aa;
    }
    
    .activity-value {
        font-size: 0.9rem;
        font-weight: 600;
        color: #60a5fa;
    }
</style>

<div class="dashboard-content stats-page">
    <h1>Stats</h1>
    
    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="confirmation-modal">
        <div class="confirmation-modal-content">
            <h3>Confirm Deletion</h3>
            <p>Are you sure you want to delete this skill?</p>
            <div class="confirmation-buttons">
                <button id="confirmDeleteBtn" class="confirm-delete-btn">Delete</button>
                <button id="cancelDeleteBtn" class="cancel-delete-btn">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Stats Overview Section -->
    <div class="stats-overview">
        <div class="overview-grid">
            <!-- XP Level Card -->
            <div class="overview-card level-card">
                <div class="card-header">
                    <div class="card-icon">🏆</div>
                    <div class="card-title">Level Progress</div>
                </div>
                <div class="level-display">
                    <div class="level-number">{{ g.user.level }}</div>
                    <div class="level-progress">
                        <div class="progress-bar">
                            {% set current_xp = g.user.xp %}
                            {% set next_level_xp = 100 * g.user.level %}
                            {% set progress = (current_xp / next_level_xp * 100) if next_level_xp > 0 else 0 %}
                            <div class="progress-fill" style="width: {{ progress }}%"></div>
                        </div>
                        <div class="progress-text">
                            <span class="current-xp">{{ g.user.xp }}</span>
                            <span class="slash">/</span>
                            <span class="required-xp">{{ next_level_xp }}</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Skill Balance Card -->
            <div class="overview-card balance-card">
                <div class="card-header">
                    <div class="card-icon">🔄</div>
                    <div class="card-title">Skill Balance</div>
                </div>
                <div class="balance-chart">
                    <canvas id="balanceChart"></canvas>
                </div>
                <div class="balance-legend">
                    <div class="legend-item">
                        <span class="legend-color physical"></span>
                        <span class="legend-text">Physical</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color mental"></span>
                        <span class="legend-text">Mental</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color communication"></span>
                        <span class="legend-text">Communication</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color productivity"></span>
                        <span class="legend-text">Productivity</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color education"></span>
                        <span class="legend-text">Education</span>
                    </div>
                </div>
            </div>

            <!-- Skill Distribution Card -->
            <div class="overview-card distribution-card">
                <div class="card-header">
                    <div class="card-icon">📊</div>
                    <div class="card-title">Skill Distribution</div>
                </div>
                <div class="distribution-chart">
                    <canvas id="distributionChart"></canvas>
                </div>
            </div>

            <!-- Recent Activity Card -->
            <div class="overview-card activity-card">
                <div class="card-header">
                    <div class="card-icon">📅</div>
                    <div class="card-title">Recent Activity</div>
                </div>
                <div class="activity-list">
                    {% if recent_activities %}
                        {% for activity in recent_activities[:5] %}
                        <div class="activity-item">
                            <div class="activity-icon">{{ activity.icon|safe }}</div>
                            <div class="activity-details">
                                <div class="activity-name">{{ activity.name }}</div>
                                <div class="activity-time">{{ activity.time }}</div>
                            </div>
                            <div class="activity-value">+{{ activity.value }}</div>
                        </div>
                        {% endfor %}
                    {% else %}
                        <div class="no-activity">No recent activities</div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Physical Skills Section -->
    <div class="skill-section physical">
        <h2>Physical Skills</h2>
        <div class="stats-grid">
            {% if user.strength is not none %}
            <div class="skill-card">
                <div class="skill-icon">💪</div>
                <div class="skill-name">Strength</div>
                <div class="skill-value">{{ user.strength|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.strength - user.strength|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Physical</div>
                <button class="delete-skill-btn" data-skill="strength">×</button>
                <button class="skill-increase" data-skill="strength">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-physical">
                    <div class="tooltip-title">Strength</div>
                    <p>Physical power and muscle capability. Improves your ability to lift, push, and exert force.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.endurance is not none %}
            <div class="skill-card">
                <div class="skill-icon">🏃</div>
                <div class="skill-name">Endurance</div>
                <div class="skill-value">{{ user.endurance|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.endurance - user.endurance|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Physical</div>
                <button class="delete-skill-btn" data-skill="endurance">×</button>
                <button class="skill-increase" data-skill="endurance">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-physical">
                    <div class="tooltip-title">Endurance</div>
                    <p>Ability to sustain prolonged physical activity. Enhances stamina and resistance to fatigue.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.flexibility is not none %}
            <div class="skill-card">
                <div class="skill-icon">🤸</div>
                <div class="skill-name">Flexibility</div>
                <div class="skill-value">{{ user.flexibility|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.flexibility - user.flexibility|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Physical</div>
                <button class="delete-skill-btn" data-skill="flexibility">×</button>
                <button class="skill-increase" data-skill="flexibility">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-physical">
                    <div class="tooltip-title">Flexibility</div>
                    <p>Range of motion in joints and muscles. Increases your ability to bend and stretch.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.agility is not none %}
            <div class="skill-card">
                <div class="skill-icon">⚡</div>
                <div class="skill-name">Agility</div>
                <div class="skill-value">{{ user.agility|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.agility - user.agility|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Physical</div>
                <button class="delete-skill-btn" data-skill="agility">×</button>
                <button class="skill-increase" data-skill="agility">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-physical">
                    <div class="tooltip-title">Agility</div>
                    <p>Ability to move quickly and easily. Improves coordination and reflexes.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.stamina is not none %}
            <div class="skill-card">
                <div class="skill-icon">🔋</div>
                <div class="skill-name">Stamina</div>
                <div class="skill-value">{{ user.stamina|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.stamina - user.stamina|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Physical</div>
                <button class="delete-skill-btn" data-skill="stamina">×</button>
                <button class="skill-increase" data-skill="stamina">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-physical">
                    <div class="tooltip-title">Stamina</div>
                    <p>Mental and physical energy to persist. Enhances your ability to maintain effort over time.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            <!-- Custom Physical Skills -->
            {% for skill in physical_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Physical</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-physical">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your physical capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    
    <!-- Mental Skills Section -->
    <div class="skill-section mental">
        <h2>Mental Skills</h2>
        <div class="stats-grid">
            {% if user.perception is not none %}
            <div class="skill-card">
                <div class="skill-icon">🔍</div>
                <div class="skill-name">Perception</div>
                <div class="skill-value">{{ user.perception|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.perception - user.perception|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Mental</div>
                <button class="delete-skill-btn" data-skill="perception">×</button>
                <button class="skill-increase" data-skill="perception">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-mental">
                    <div class="tooltip-title">Perception</div>
                    <p>Ability to notice and interpret sensory information. Enhances awareness and understanding.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.creativity is not none %}
            <div class="skill-card">
                <div class="skill-icon">🎨</div>
                <div class="skill-name">Creativity</div>
                <div class="skill-value">{{ user.creativity|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.creativity - user.creativity|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Mental</div>
                <button class="delete-skill-btn" data-skill="creativity">×</button>
                <button class="skill-increase" data-skill="creativity">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-mental">
                    <div class="tooltip-title">Creativity</div>
                    <p>Ability to generate new and original ideas. Enhances problem-solving and innovation.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.memory is not none %}
            <div class="skill-card">
                <div class="skill-icon">📚</div>
                <div class="skill-name">Memory</div>
                <div class="skill-value">{{ user.memory|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.memory - user.memory|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Mental</div>
                <button class="delete-skill-btn" data-skill="memory">×</button>
                <button class="skill-increase" data-skill="memory">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-mental">
                    <div class="tooltip-title">Memory</div>
                    <p>Ability to store and recall information. Enhances learning and retention.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.logic is not none %}
            <div class="skill-card">
                <div class="skill-icon">💡</div>
                <div class="skill-name">Logic</div>
                <div class="skill-value">{{ user.logic|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.logic - user.logic|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Mental</div>
                <button class="delete-skill-btn" data-skill="logic">×</button>
                <button class="skill-increase" data-skill="logic">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-mental">
                    <div class="tooltip-title">Logic</div>
                    <p>Ability to reason and think critically. Enhances problem-solving and decision-making.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.focus is not none %}
            <div class="skill-card">
                <div class="skill-icon">🔍</div>
                <div class="skill-name">Focus</div>
                <div class="skill-value">{{ user.focus|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.focus - user.focus|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Mental</div>
                <button class="delete-skill-btn" data-skill="focus">×</button>
                <button class="skill-increase" data-skill="focus">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-mental">
                    <div class="tooltip-title">Focus</div>
                    <p>Ability to concentrate and maintain attention. Enhances productivity and mental clarity.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            <!-- Custom Mental Skills -->
            {% for skill in mental_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Mental</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-mental">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your mental capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    
    <!-- Communication Skills Section -->
    <div class="skill-section communication">
        <h2>Communication Skills</h2>
        <div class="stats-grid">
            {% if user.speaking is not none %}
            <div class="skill-card">
                <div class="skill-icon">💬</div>
                <div class="skill-name">Speaking</div>
                <div class="skill-value">{{ user.speaking|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.speaking - user.speaking|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Communication</div>
                <button class="delete-skill-btn" data-skill="speaking">×</button>
                <button class="skill-increase" data-skill="speaking">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-communication">
                    <div class="tooltip-title">Speaking</div>
                    <p>Ability to express yourself effectively through verbal communication. Enhances public speaking and presentation skills.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.writing is not none %}
            <div class="skill-card">
                <div class="skill-icon">📝</div>
                <div class="skill-name">Writing</div>
                <div class="skill-value">{{ user.writing|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.writing - user.writing|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Communication</div>
                <button class="delete-skill-btn" data-skill="writing">×</button>
                <button class="skill-increase" data-skill="writing">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-communication">
                    <div class="tooltip-title">Writing</div>
                    <p>Ability to express yourself effectively through written communication. Enhances writing and composition skills.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.empathy is not none %}
            <div class="skill-card">
                <div class="skill-icon">❤️</div>
                <div class="skill-name">Empathy</div>
                <div class="skill-value">{{ user.empathy|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.empathy - user.empathy|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Communication</div>
                <button class="delete-skill-btn" data-skill="empathy">×</button>
                <button class="skill-increase" data-skill="empathy">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-communication">
                    <div class="tooltip-title">Empathy</div>
                    <p>Ability to understand and share the feelings of others. Enhances interpersonal relationships and conflict resolution.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.persuasion is not none %}
            <div class="skill-card">
                <div class="skill-icon">📢</div>
                <div class="skill-name">Persuasion</div>
                <div class="skill-value">{{ user.persuasion|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.persuasion - user.persuasion|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Communication</div>
                <button class="delete-skill-btn" data-skill="persuasion">×</button>
                <button class="skill-increase" data-skill="persuasion">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-communication">
                    <div class="tooltip-title">Persuasion</div>
                    <p>Ability to influence others through effective communication. Enhances negotiation and sales skills.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.active_listening is not none %}
            <div class="skill-card">
                <div class="skill-icon">👂</div>
                <div class="skill-name">Active Listening</div>
                <div class="skill-value">{{ user.active_listening|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.active_listening - user.active_listening|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Communication</div>
                <button class="delete-skill-btn" data-skill="active_listening">×</button>
                <button class="skill-increase" data-skill="active_listening">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-communication">
                    <div class="tooltip-title">Active Listening</div>
                    <p>Ability to fully concentrate on and comprehend the message being conveyed. Enhances understanding and relationships.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            <!-- Custom Communication Skills -->
            {% for skill in communication_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Communication</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-communication">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your communication capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    
    <!-- Productivity Skills Section -->
    <div class="skill-section productivity">
        <h2>Productivity Skills</h2>
        <div class="stats-grid">
            {% if user.time_management is not none %}
            <div class="skill-card">
                <div class="skill-icon">🕒</div>
                <div class="skill-name">Time Management</div>
                <div class="skill-value">{{ user.time_management|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.time_management - user.time_management|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Productivity</div>
                <button class="delete-skill-btn" data-skill="time_management">×</button>
                <button class="skill-increase" data-skill="time_management">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-productivity">
                    <div class="tooltip-title">Time Management</div>
                    <p>Ability to plan and control the amount of time spent on tasks. Enhances efficiency and productivity.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.organization is not none %}
            <div class="skill-card">
                <div class="skill-icon">🗂️</div>
                <div class="skill-name">Organization</div>
                <div class="skill-value">{{ user.organization|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.organization - user.organization|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Productivity</div>
                <button class="delete-skill-btn" data-skill="organization">×</button>
                <button class="skill-increase" data-skill="organization">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-productivity">
                    <div class="tooltip-title">Organization</div>
                    <p>Ability to plan, coordinate, and structure tasks and activities. Enhances productivity and efficiency.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.self_discipline is not none %}
            <div class="skill-card">
                <div class="skill-icon">💪</div>
                <div class="skill-name">Self-Discipline</div>
                <div class="skill-value">{{ user.self_discipline|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.self_discipline - user.self_discipline|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Productivity</div>
                <button class="delete-skill-btn" data-skill="self_discipline">×</button>
                <button class="skill-increase" data-skill="self_discipline">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-productivity">
                    <div class="tooltip-title">Self-Discipline</div>
                    <p>Ability to regulate and control one's own behavior. Enhances motivation and productivity.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.goal_setting is not none %}
            <div class="skill-card">
                <div class="skill-icon">🎯</div>
                <div class="skill-name">Goal Setting</div>
                <div class="skill-value">{{ user.goal_setting|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.goal_setting - user.goal_setting|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Productivity</div>
                <button class="delete-skill-btn" data-skill="goal_setting">×</button>
                <button class="skill-increase" data-skill="goal_setting">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-productivity">
                    <div class="tooltip-title">Goal Setting</div>
                    <p>Ability to set and achieve specific, measurable, and attainable goals. Enhances motivation and direction.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.stress_management is not none %}
            <div class="skill-card">
                <div class="skill-icon">💆‍♀️</div>
                <div class="skill-name">Stress Management</div>
                <div class="skill-value">{{ user.stress_management|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.stress_management - user.stress_management|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Productivity</div>
                <button class="delete-skill-btn" data-skill="stress_management">×</button>
                <button class="skill-increase" data-skill="stress_management">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-productivity">
                    <div class="tooltip-title">Stress Management</div>
                    <p>Ability to manage and reduce stress. Enhances well-being and productivity.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            <!-- Custom Productivity Skills -->
            {% for skill in productivity_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Productivity</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-productivity">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your productivity capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    
    <!-- Education Skills Section -->
    <div class="skill-section education">
        <h2>Education Skills</h2>
        <div class="stats-grid">
            {% if user.research is not none %}
            <div class="skill-card">
                <div class="skill-icon">🔍</div>
                <div class="skill-name">Research</div>
                <div class="skill-value">{{ user.research|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.research - user.research|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Education</div>
                <button class="delete-skill-btn" data-skill="research">×</button>
                <button class="skill-increase" data-skill="research">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-education">
                    <div class="tooltip-title">Research</div>
                    <p>Ability to gather and analyze information. Enhances knowledge and understanding.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.analysis is not none %}
            <div class="skill-card">
                <div class="skill-icon">📊</div>
                <div class="skill-name">Analysis</div>
                <div class="skill-value">{{ user.analysis|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.analysis - user.analysis|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Education</div>
                <button class="delete-skill-btn" data-skill="analysis">×</button>
                <button class="skill-increase" data-skill="analysis">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-education">
                    <div class="tooltip-title">Analysis</div>
                    <p>Ability to break down complex information into smaller parts. Enhances understanding and problem-solving.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.critical_thinking is not none %}
            <div class="skill-card">
                <div class="skill-icon">💡</div>
                <div class="skill-name">Critical Thinking</div>
                <div class="skill-value">{{ user.critical_thinking|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.critical_thinking - user.critical_thinking|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Education</div>
                <button class="delete-skill-btn" data-skill="critical_thinking">×</button>
                <button class="skill-increase" data-skill="critical_thinking">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-education">
                    <div class="tooltip-title">Critical Thinking</div>
                    <p>Ability to objectively analyze and evaluate information. Enhances decision-making and problem-solving.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.problem_solving is not none %}
            <div class="skill-card">
                <div class="skill-icon">🤔</div>
                <div class="skill-name">Problem Solving</div>
                <div class="skill-value">{{ user.problem_solving|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.problem_solving - user.problem_solving|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Education</div>
                <button class="delete-skill-btn" data-skill="problem_solving">×</button>
                <button class="skill-increase" data-skill="problem_solving">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-education">
                    <div class="tooltip-title">Problem Solving</div>
                    <p>Ability to identify and resolve problems. Enhances critical thinking and decision-making.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            {% if user.strategy is not none %}
            <div class="skill-card">
                <div class="skill-icon">📈</div>
                <div class="skill-name">Strategy</div>
                <div class="skill-value">{{ user.strategy|int }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ ((user.strategy - user.strategy|int) * 100)|int }}%;"></div>
                </div>
                <div class="skill-category">Education</div>
                <button class="delete-skill-btn" data-skill="strategy">×</button>
                <button class="skill-increase" data-skill="strategy">+</button>
                
                <!-- Tooltip with skill description -->
                <div class="skill-tooltip tooltip-education">
                    <div class="tooltip-title">Strategy</div>
                    <p>Ability to plan and execute long-term plans. Enhances leadership and management skills.</p>
                </div>
                
                <!-- Info indicator -->
                <div class="info-indicator">ℹ️</div>
            </div>
            {% endif %}
            
            <!-- Custom Education Skills -->
            {% for skill in education_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Education</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-education">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your education capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    
    <!-- Gaming Skills Section -->
    <div class="skill-section gaming">
        <h2>Gaming Skills</h2>
        <div class="stats-grid">
            {% if user.gaming > 0 %}
            <div class="skill-card">
                <div class="skill-icon">🎮</div>
                <div class="skill-name">Gaming</div>
                <div class="skill-value">{{ "%.1f"|format(user.gaming) }}</div>
                <div class="skill-progress-bar">
                    <div class="skill-progress" style="width: {{ user.gaming * 100 }}%"></div>
                </div>
                <div class="skill-category">Gaming</div>
                <button class="skill-increase" data-skill="gaming">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
            {% endif %}
        </div>
    </div>
    
    <!-- Other Skills Section -->
    {% if other_skills and other_skills|length > 0 %}
    <div class="skill-section other">
        <h2>Other Skills</h2>
        <div class="stats-grid">
            {% for skill in other_skills %}
                {% if skill.level is not none %}
                <div class="skill-card">
                    <div class="skill-icon">{{ skill.icon }}</div>
                    <div class="skill-name">{{ skill.name }}</div>
                    <div class="skill-value">{{ skill.level|int }}</div>
                    <div class="skill-progress-bar">
                        <div class="skill-progress" style="width: {{ ((skill.level - skill.level|int) * 100)|int }}%;"></div>
                    </div>
                    <div class="skill-category">Other</div>
                    <button class="delete-skill-btn" data-skill="custom_{{ skill.id }}">×</button>
                    <button class="skill-increase" data-skill="custom_{{ skill.id }}">+</button>
                    
                    <!-- Tooltip with skill description -->
                    <div class="skill-tooltip tooltip-other">
                        <div class="tooltip-title">{{ skill.name }}</div>
                        <p>{{ skill.description or "Develop this skill to enhance your capabilities." }}</p>
                    </div>
                    
                    <!-- Info indicator -->
                    <div class="info-indicator">ℹ️</div>
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
    {% endif %}
    
    <!-- Add New Skill Section -->
    <div class="skill-section add-new">
        <h2>Add New Skill</h2>
        <div class="add-skill-form">
            <form id="addSkillForm">
                <div class="form-group">
                    <label for="skillName">Skill Name:</label>
                    <input type="text" id="skillName" name="name" required placeholder="Enter skill name">
                </div>
                
                <div class="form-row" style="display: flex; gap: 20px;">
                    <div class="form-group" style="flex: 1;">
                        <label for="skillCategory">Category:</label>
                        <select id="skillCategory" name="category" required>
                            <option value="" disabled selected>Select a category</option>
                            <option value="Physical">Physical</option>
                            <option value="Mental">Mental</option>
                            <option value="Communication">Communication</option>
                            <option value="Productivity">Productivity</option>
                            <option value="Education">Education</option>
                            <option value="Gaming">Gaming</option>
                            <option value="Other">Other</option>
                            <option value="custom">Add New Category...</option>
                        </select>
                    </div>
                    
                    <div class="form-group" style="flex: 1;" id="customCategoryGroup" style="display: none;">
                        <label for="customCategory">New Category Name:</label>
                        <input type="text" id="customCategory" name="customCategory" placeholder="Enter new category name">
                    </div>
                </div>
                
                <div id="themeColorGroup" style="display: none;">
                    <div class="form-group">
                        <label for="themeColor">Theme Color:</label>
                        <div class="color-picker-container" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">
                            <div class="color-option" data-color="#60a5fa" style="background: linear-gradient(90deg, #2563eb, #60a5fa); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#a78bfa" style="background: linear-gradient(90deg, #7c3aed, #a78bfa); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#f472b6" style="background: linear-gradient(90deg, #db2777, #f472b6); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#34d399" style="background: linear-gradient(90deg, #10b981, #34d399); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#fbbf24" style="background: linear-gradient(90deg, #d97706, #fbbf24); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#94a3b8" style="background: linear-gradient(90deg, #64748b, #94a3b8); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#f87171" style="background: linear-gradient(90deg, #dc2626, #f87171); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#4ade80" style="background: linear-gradient(90deg, #16a34a, #4ade80); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option" data-color="#2dd4bf" style="background: linear-gradient(90deg, #0d9488, #2dd4bf); width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2);"></div>
                            <div class="color-option custom-color" style="background: #1f2937; width: 40px; height: 40px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 5px rgba(0,0,0,0.2); display: flex; align-items: center; justify-content: center; font-size: 20px; color: white;">+</div>
                        </div>
                        <input type="hidden" id="themeColor" name="themeColor" value="">
                        <input type="color" id="customColorPicker" style="display: none;">
                    </div>
                    
                    <div class="form-group" style="margin-top: 20px;">
                        <div class="theme-preview" style="background: rgba(15, 23, 42, 0.5); border-radius: 12px; padding: 20px; border: 1px solid rgba(99, 102, 241, 0.2); margin-bottom: 20px;">
                            <h4 style="font-family: 'Orbitron', sans-serif; margin-bottom: 15px; color: #e5e7eb; text-align: center;">Theme Preview</h4>
                            <div class="preview-card" style="background: linear-gradient(135deg, rgba(26, 32, 48, 0.95), rgba(35, 41, 70, 0.95)); border-radius: 12px; padding: 20px; position: relative; overflow: hidden; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); border: 1px solid rgba(101, 126, 234, 0.2);">
                                <div class="preview-card-top" style="position: absolute; top: 0; left: 0; right: 0; height: 3px; background: linear-gradient(90deg, #3b82f6, #6366f1); z-index: 1;"></div>
                                <div style="text-align: center;">
                                    <div class="preview-icon" style="font-size: 2rem; margin-bottom: 10px; color: #e5e7eb;">🏆</div>
                                    <div class="preview-name" style="font-size: 1.2rem; font-weight: 600; color: #e5e7eb; margin-bottom: 10px; font-family: 'Rajdhani', sans-serif; text-transform: uppercase; letter-spacing: 1px;">Sample Skill</div>
                                    <div class="preview-value" style="font-size: 3rem; font-weight: bold; color: #3b82f6; text-shadow: 0 0 15px rgba(59, 130, 246, 0.4); margin-bottom: 10px; font-family: 'Orbitron', sans-serif;">10</div>
                                    <div class="preview-bar" style="height: 8px; background: rgba(15, 23, 42, 0.7); border-radius: 4px; overflow: hidden; margin-top: 10px; position: relative;">
                                        <div class="preview-progress" style="height: 100%; border-radius: 4px; width: 60%; background: linear-gradient(90deg, #3b82f6, #6366f1);"></div>
                                    </div>
                                    <div class="preview-category" style="font-size: 0.8rem; margin-top: 15px; text-transform: uppercase; letter-spacing: 1px; color: #3b82f6; font-family: 'Rajdhani', sans-serif; font-weight: 500;">New Category</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="skillIcon">Icon:</label>
                    <input type="text" id="skillIcon" name="icon" placeholder="Enter emoji or icon (e.g. 🏃)" value="🏆">
                </div>
                
                <div class="form-group">
                    <label for="skillDescription">Description:</label>
                    <textarea id="skillDescription" name="description" rows="3" placeholder="Enter skill description"></textarea>
                </div>
                
                <button type="submit" class="add-skill-submit">Add Skill</button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize skill progress bars
        const progressBars = document.querySelectorAll('.skill-progress');
        progressBars.forEach(bar => {
            const width = bar.style.width;
            bar.style.width = '0%';
            setTimeout(() => {
                bar.style.transition = 'width 1s ease-in-out';
                bar.style.width = width;
            }, 300);
        });
        
        // Skill card hover effects
        const skillCards = document.querySelectorAll('.skill-card');
        skillCards.forEach(card => {
            // Hover effect
            card.addEventListener('mouseenter', function() {
                this.classList.add('hovering');
            });
            
            card.addEventListener('mouseleave', function() {
                this.classList.remove('hovering');
            });
            
            // Show tooltip on info indicator click
            const infoIndicator = card.querySelector('.info-indicator');
            const tooltip = card.querySelector('.skill-tooltip');
            
            if (infoIndicator && tooltip) {
                infoIndicator.addEventListener('click', function(e) {
                    e.stopPropagation();
                    tooltip.classList.toggle('visible');
                });
            }
            
            // Hide tooltip when clicking outside
            document.addEventListener('click', function(e) {
                if (!card.contains(e.target)) {
                    if (tooltip) {
                        tooltip.classList.remove('visible');
                    }
                }
            });
        });
        
        // Add skill increase button functionality
        const increaseButtons = document.querySelectorAll('.skill-increase');
        increaseButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                
                // Get the parent skill card
                const skillCard = this.closest('.skill-card');
                
                // Get skill info
                const skillId = this.getAttribute('data-skill');
                
                // Show animation
                skillCard.style.animation = 'pulse 1s infinite';
                
                // Make API call to increase skill level
                fetch('/api/increase_skill', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        skill: skillId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update skill value
                        const skillValue = skillCard.querySelector('.skill-value');
                        const newValue = data.new_value || data.new_level;
                        skillValue.textContent = Math.floor(newValue);
                        
                        // Update progress bar
                        const progressBar = skillCard.querySelector('.skill-progress');
                        const progressPercentage = ((newValue - Math.floor(newValue)) * 100);
                        progressBar.style.width = progressPercentage + '%';
                        
                        // Flash effect for success
                        skillCard.style.animation = '';
                        skillCard.style.boxShadow = '0 0 20px rgba(16, 185, 129, 0.7)';
                        setTimeout(() => {
                            skillCard.style.boxShadow = '';
                        }, 1000);
                    } else {
                        // Flash effect for error
                        skillCard.style.animation = '';
                        skillCard.style.boxShadow = '0 0 20px rgba(239, 68, 68, 0.7)';
                        setTimeout(() => {
                            skillCard.style.boxShadow = '';
                        }, 1000);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Flash effect for error
                    skillCard.style.animation = '';
                    skillCard.style.boxShadow = '0 0 20px rgba(239, 68, 68, 0.7)';
                    setTimeout(() => {
                        skillCard.style.boxShadow = '';
                    }, 1000);
                });
            });
        });
        
        // Delete skill functionality
        const deleteButtons = document.querySelectorAll('.delete-skill-btn');
        const confirmationModal = document.getElementById('confirmationModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        let skillToDelete = null;
        let skillCardToDelete = null;
        
        deleteButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                skillToDelete = this.getAttribute('data-skill');
                skillCardToDelete = this.closest('.skill-card');
                confirmationModal.style.display = 'block';
            });
        });
        
        confirmDeleteBtn.addEventListener('click', function() {
            if (skillToDelete && skillCardToDelete) {
                // Make API call to delete skill
                fetch('/api/skills/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        skill: skillToDelete
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        if (response.status === 404) {
                            // If skill not found, we can still remove it from the UI
                            return { success: true, message: 'Skill removed' };
                        }
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Even if there was an error from the server but the status was 200,
                    // we'll remove the skill from the UI
                    // Remove skill card from DOM
                    skillCardToDelete.style.opacity = '0';
                    setTimeout(() => {
                        skillCardToDelete.remove();
                    }, 300);
                    
                    // Show success message
                    const successMessage = document.createElement('div');
                    successMessage.className = 'success-message';
                    successMessage.textContent = 'Skill deleted successfully';
                    successMessage.style.position = 'fixed';
                    successMessage.style.top = '20px';
                    successMessage.style.left = '50%';
                    successMessage.style.transform = 'translateX(-50%)';
                    successMessage.style.padding = '10px 20px';
                    successMessage.style.backgroundColor = 'rgba(16, 185, 129, 0.9)';
                    successMessage.style.color = 'white';
                    successMessage.style.borderRadius = '8px';
                    successMessage.style.zIndex = '9999';
                    successMessage.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.15)';
                    document.body.appendChild(successMessage);
                    
                    setTimeout(() => {
                        successMessage.style.opacity = '0';
                        successMessage.style.transition = 'opacity 0.5s ease';
                        setTimeout(() => {
                            if (document.body.contains(successMessage)) {
                                document.body.removeChild(successMessage);
                            }
                        }, 500);
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Flash effect for error
                    skillCardToDelete.style.animation = '';
                    skillCardToDelete.style.boxShadow = '0 0 20px rgba(239, 68, 68, 0.7)';
                    setTimeout(() => {
                        skillCardToDelete.style.boxShadow = '';
                    }, 1000);
                });
            }
            
            confirmationModal.style.display = 'none';
            skillToDelete = null;
            skillCardToDelete = null;
        });
        
        cancelDeleteBtn.addEventListener('click', function() {
            confirmationModal.style.display = 'none';
            skillToDelete = null;
            skillCardToDelete = null;
        });
        
        // Add skill form submission
        const addSkillForm = document.getElementById('addSkillForm');
        const skillCategorySelect = document.getElementById('skillCategory');
        const customCategoryGroup = document.getElementById('customCategoryGroup');
        const customCategoryInput = document.getElementById('customCategory');
        const themeColorGroup = document.getElementById('themeColorGroup');
        const themeColorInput = document.getElementById('themeColor');
        const customColorPicker = document.getElementById('customColorPicker');
        const colorOptions = document.querySelectorAll('.color-option');
        
        // Preview elements
        const previewCardTop = document.querySelector('.preview-card-top');
        const previewValue = document.querySelector('.preview-value');
        const previewProgress = document.querySelector('.preview-progress');
        const previewCategory = document.querySelector('.preview-category');
        
        // Show/hide custom category input when "Add New Category" is selected
        skillCategorySelect.addEventListener('change', function() {
            if (this.value === 'custom') {
                customCategoryGroup.style.display = 'block';
                themeColorGroup.style.display = 'block';
                customCategoryInput.required = true;
            } else {
                customCategoryGroup.style.display = 'none';
                themeColorGroup.style.display = 'none';
                customCategoryInput.required = false;
            }
        });
        
        // Handle color selection
        colorOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Remove selected class from all options
                colorOptions.forEach(opt => opt.style.border = 'none');
                
                // If it's the custom color option
                if (this.classList.contains('custom-color')) {
                    customColorPicker.click();
                    return;
                }
                
                // Add selected class to clicked option
                this.style.border = '3px solid white';
                
                // Get the selected color
                const color = this.getAttribute('data-color');
                themeColorInput.value = color;
                
                // Update preview
                updatePreview(color);
            });
        });
        
        // Handle custom color picker
        customColorPicker.addEventListener('input', function() {
            const color = this.value;
            themeColorInput.value = color;
            
            // Update custom color option appearance
            const customColorOption = document.querySelector('.custom-color');
            customColorOption.style.background = color;
            customColorOption.innerHTML = '';
            customColorOption.style.border = '3px solid white';
            
            // Update preview
            updatePreview(color);
        });
        
        // Update the preview card with selected color
        function updatePreview(color) {
            // Extract base color for gradient
            let baseColor = color;
            let secondColor = color;
            
            // Try to create a gradient by adjusting the color
            try {
                // Convert hex to RGB
                const r = parseInt(color.slice(1, 3), 16);
                const g = parseInt(color.slice(3, 5), 16);
                const b = parseInt(color.slice(5, 7), 16);
                
                // Create darker version for gradient
                const darkerR = Math.max(0, r - 40);
                const darkerG = Math.max(0, g - 40);
                const darkerB = Math.max(0, b - 40);
                
                baseColor = `#${darkerR.toString(16).padStart(2, '0')}${darkerG.toString(16).padStart(2, '0')}${darkerB.toString(16).padStart(2, '0')}`;
            } catch (e) {
                console.log('Error creating gradient:', e);
            }
            
            // Update preview elements
            previewCardTop.style.background = `linear-gradient(90deg, ${baseColor}, ${color})`;
            previewValue.style.color = color;
            previewValue.style.textShadow = `0 0 15px ${color}80`; // Add 50% opacity for shadow
            previewProgress.style.background = `linear-gradient(90deg, ${baseColor}, ${color})`;
            previewCategory.style.color = color;
            
            // Update category name in preview
            if (customCategoryInput.value) {
                previewCategory.textContent = customCategoryInput.value;
            } else {
                previewCategory.textContent = 'New Category';
            }
        }
        
        // Update preview when custom category name changes
        customCategoryInput.addEventListener('input', function() {
            previewCategory.textContent = this.value || 'New Category';
        });
        
        // Form submission
        addSkillForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const skillData = {};
            
            formData.forEach((value, key) => {
                // Handle custom category
                if (key === 'category' && value === 'custom') {
                    skillData[key] = formData.get('customCategory');
                    // Add theme color data
                    skillData['theme_color'] = formData.get('themeColor');
                } else if (key !== 'customCategory' && key !== 'themeColor') {
                    skillData[key] = value;
                }
            });
            
            // Make API call to add skill
            fetch('/api/add_skill', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(skillData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    const successMessage = document.createElement('div');
                    successMessage.className = 'success-message';
                    successMessage.textContent = 'Skill added successfully!';
                    successMessage.style.position = 'fixed';
                    successMessage.style.top = '20px';
                    successMessage.style.left = '50%';
                    successMessage.style.transform = 'translateX(-50%)';
                    successMessage.style.padding = '10px 20px';
                    successMessage.style.backgroundColor = 'rgba(16, 185, 129, 0.9)';
                    successMessage.style.color = 'white';
                    successMessage.style.borderRadius = '8px';
                    successMessage.style.zIndex = '9999';
                    successMessage.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.15)';
                    document.body.appendChild(successMessage);
                    
                    setTimeout(() => {
                        successMessage.style.opacity = '0';
                        successMessage.style.transition = 'opacity 0.5s ease';
                        setTimeout(() => {
                            if (document.body.contains(successMessage)) {
                                document.body.removeChild(successMessage);
                            }
                            // Reload page to show new skill
                            window.location.reload();
                        }, 500);
                    }, 1500);
                } else {
                    alert('Error adding skill: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding skill: ' + error.message);
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const skillCards = document.querySelectorAll('.skill-card');
        
        skillCards.forEach(card => {
            let hoverTimer;
            
            card.addEventListener('mouseenter', () => {
                hoverTimer = setTimeout(() => {
                    const description = card.querySelector('.skill-description');
                    if (description) {
                        description.classList.add('visible');
                    }
                }, 5000); // 5-second delay
            });
            
            card.addEventListener('mouseleave', () => {
                clearTimeout(hoverTimer);
                const description = card.querySelector('.skill-description');
                if (description) {
                    description.classList.remove('visible');
                }
            });
        });
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Skill Balance Chart
        const balanceCtx = document.getElementById('balanceChart').getContext('2d');
        const balanceChart = new Chart(balanceCtx, {
            type: 'doughnut',
            data: {
                labels: ['Physical', 'Mental', 'Communication', 'Productivity', 'Education'],
                datasets: [{
                    data: [
                        {{ category_averages['Physical'] }},
                        {{ category_averages['Mental'] }},
                        {{ category_averages['Communication'] }},
                        {{ category_averages['Productivity'] }},
                        {{ category_averages['Education'] }}
                    ],
                    backgroundColor: [
                        '#60a5fa',
                        '#8b5cf6',
                        '#10b981',
                        '#f59e0b',
                        '#ec4899'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '60%',
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // Skill Distribution Chart
        const distributionCtx = document.getElementById('distributionChart').getContext('2d');
        
        // Get all skill values
        const skillValues = [
            {{ category_averages['Physical'] }},
            {{ category_averages['Mental'] }},
            {{ category_averages['Communication'] }},
            {{ category_averages['Productivity'] }},
            {{ category_averages['Education'] }}
        ];
        
        // Find the maximum skill value
        const maxSkillValue = Math.max(...skillValues);
        
        // Calculate appropriate max value for y-axis (round up to nearest 5 or 10)
        const maxTick = Math.ceil(maxSkillValue / 5) * 5;
        
        const distributionChart = new Chart(distributionCtx, {
            type: 'bar',
            data: {
                labels: ['Physical', 'Mental', 'Communication', 'Productivity', 'Education'],
                datasets: [{
                    label: 'Average Skill Levels',
                    data: skillValues,
                    backgroundColor: [
                        'rgba(96, 165, 250, 0.8)',
                        'rgba(139, 92, 246, 0.8)',
                        'rgba(16, 185, 129, 0.8)',
                        'rgba(245, 158, 11, 0.8)',
                        'rgba(236, 72, 153, 0.8)'
                    ],
                    borderColor: [
                        '#60a5fa',
                        '#8b5cf6',
                        '#10b981',
                        '#f59e0b',
                        '#ec4899'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: maxTick,
                        ticks: {
                            color: '#a1a1aa',
                            callback: function(value) {
                                return value.toFixed(1);
                            }
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            borderDash: [5, 5]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#a1a1aa'
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += context.parsed.y.toFixed(1);
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
    });
</script>
{% endblock %}